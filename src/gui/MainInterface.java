/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import docDescription.DocDes;
import javax.swing.JOptionPane;
import ontologyLayer.AnatomyEncapsulate;
import ontologyLayer.DiseasesEncapsulate;
import ontologyLayer.EdamEncapsulate;
import ontologyLayer.GenoEncapsulate;
import ontologyLayer.MeshEncapsulate;
import ontologyLayer.OgmsEncapsulate;
import ontologyLayer.WordNetEncapsulate;
import utils.Constants;
import utils.Goperations;
import utils.OntologyConstants;

/**
 *
 * @author A
 */
public class MainInterface extends javax.swing.JFrame {

    /**
     * Creates new form MainInterface
     */
    public static String executeOper="";
    public static String ontologyNames="";
    public static DocDes doc1Des=null; 
    
    public MainInterface() {
        initComponents();
        doc1Des=new DocDes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitOnto = new javax.swing.JSplitPane();
        jScroPanOnto = new javax.swing.JScrollPane();
        panOntologies = new javax.swing.JPanel();
        chOgms = new javax.swing.JCheckBox();
        chDiseaseOnt = new javax.swing.JCheckBox();
        chGeneontology = new javax.swing.JCheckBox();
        chWordNetOnt = new javax.swing.JCheckBox();
        chMeshOntology = new javax.swing.JCheckBox();
        chEdamOntology = new javax.swing.JCheckBox();
        chAnatomyOntology = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnLoadOntologies = new javax.swing.JButton();
        jScroPanText = new javax.swing.JScrollPane();
        jSplitTxtOperations = new javax.swing.JSplitPane();
        javax.swing.JPanel jPanOperations = new javax.swing.JPanel();
        chTxtSegmentation = new javax.swing.JCheckBox();
        chRemStopW = new javax.swing.JCheckBox();
        chStemming = new javax.swing.JCheckBox();
        chTermDetection = new javax.swing.JCheckBox();
        chSemanticMeans = new javax.swing.JCheckBox();
        btnOperation = new javax.swing.JButton();
        chTagger = new javax.swing.JCheckBox();
        chPhraseMeaning = new javax.swing.JCheckBox();
        chNons = new javax.swing.JCheckBox();
        chVerbsOnly = new javax.swing.JCheckBox();
        btnDetectPlag = new javax.swing.JButton();
        jScrolTxtAfterEffect = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtPanSourceTxt1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtPanDestTxt1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitOnto.setDividerLocation(200);
        jSplitOnto.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScroPanOnto.setMinimumSize(new java.awt.Dimension(100, 150));

        chOgms.setText("Ontology for General Medical Science");
        chOgms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chOgmsActionPerformed(evt);
            }
        });

        chDiseaseOnt.setText("Disease Ontology");
        chDiseaseOnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chDiseaseOntActionPerformed(evt);
            }
        });

        chGeneontology.setText("Gene ontology");
        chGeneontology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chGeneontologyActionPerformed(evt);
            }
        });

        chWordNetOnt.setText("Word Net ontology");
        chWordNetOnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chWordNetOntActionPerformed(evt);
            }
        });

        chMeshOntology.setText("Mesh Ontology");
        chMeshOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chMeshOntologyActionPerformed(evt);
            }
        });

        chEdamOntology.setText("EDAM Ontology");
        chEdamOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chEdamOntologyActionPerformed(evt);
            }
        });

        chAnatomyOntology.setText("Anatomy Ontology");
        chAnatomyOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chAnatomyOntologyActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 0));
        jButton1.setText("word net");
        jButton1.setPreferredSize(new java.awt.Dimension(59, 23));

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("geno ");

        jButton3.setBackground(new java.awt.Color(0, 153, 51));
        jButton3.setForeground(new java.awt.Color(51, 153, 0));
        jButton3.setPreferredSize(new java.awt.Dimension(59, 23));

        btnLoadOntologies.setText("load ontology");
        btnLoadOntologies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadOntologiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panOntologiesLayout = new javax.swing.GroupLayout(panOntologies);
        panOntologies.setLayout(panOntologiesLayout);
        panOntologiesLayout.setHorizontalGroup(
            panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panOntologiesLayout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chAnatomyOntology)
                    .addComponent(chEdamOntology)
                    .addComponent(chOgms, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chMeshOntology, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panOntologiesLayout.createSequentialGroup()
                        .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panOntologiesLayout.createSequentialGroup()
                                .addComponent(chDiseaseOnt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panOntologiesLayout.createSequentialGroup()
                                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(chWordNetOnt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chGeneontology, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(94, 94, 94)
                        .addComponent(btnLoadOntologies, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1936, Short.MAX_VALUE))
        );
        panOntologiesLayout.setVerticalGroup(
            panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panOntologiesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chWordNetOnt)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chGeneontology)
                    .addComponent(jButton2)
                    .addComponent(btnLoadOntologies, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chDiseaseOnt)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chOgms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chMeshOntology)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chEdamOntology)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chAnatomyOntology)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScroPanOnto.setViewportView(panOntologies);

        jSplitOnto.setTopComponent(jScroPanOnto);

        chTxtSegmentation.setText("Segmentation 2 Sentences");
        chTxtSegmentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chTxtSegmentationActionPerformed(evt);
            }
        });

        chRemStopW.setText("remove stop words");
        chRemStopW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chRemStopWActionPerformed(evt);
            }
        });

        chStemming.setText("stemming");
        chStemming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chStemmingActionPerformed(evt);
            }
        });

        chTermDetection.setText("term Detction");
        chTermDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chTermDetectionActionPerformed(evt);
            }
        });

        chSemanticMeans.setText("semantic meanings");
        chSemanticMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSemanticMeansActionPerformed(evt);
            }
        });

        btnOperation.setText("execute");
        btnOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOperationActionPerformed(evt);
            }
        });

        chTagger.setText("POS Tagging");
        chTagger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chTaggerActionPerformed(evt);
            }
        });

        chPhraseMeaning.setText("phrase Detection");
        chPhraseMeaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPhraseMeaningActionPerformed(evt);
            }
        });

        chNons.setText("nouns only");
        chNons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chNonsActionPerformed(evt);
            }
        });

        chVerbsOnly.setText("verbs only");
        chVerbsOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chVerbsOnlyActionPerformed(evt);
            }
        });

        btnDetectPlag.setText("detect plagiarism");
        btnDetectPlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectPlagActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanOperationsLayout = new javax.swing.GroupLayout(jPanOperations);
        jPanOperations.setLayout(jPanOperationsLayout);
        jPanOperationsLayout.setHorizontalGroup(
            jPanOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOperationsLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chVerbsOnly)
                    .addComponent(chNons)
                    .addComponent(chPhraseMeaning)
                    .addComponent(chRemStopW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chSemanticMeans, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOperation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chStemming, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chTermDetection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chTxtSegmentation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chTagger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDetectPlag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanOperationsLayout.setVerticalGroup(
            jPanOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOperationsLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(chTxtSegmentation)
                .addGap(18, 18, 18)
                .addComponent(chTagger)
                .addGap(18, 18, 18)
                .addComponent(chNons)
                .addGap(22, 22, 22)
                .addComponent(chVerbsOnly)
                .addGap(18, 18, 18)
                .addComponent(chRemStopW)
                .addGap(18, 18, 18)
                .addComponent(chStemming)
                .addGap(18, 18, 18)
                .addComponent(chTermDetection)
                .addGap(18, 18, 18)
                .addComponent(chSemanticMeans)
                .addGap(18, 18, 18)
                .addComponent(chPhraseMeaning)
                .addGap(37, 37, 37)
                .addComponent(btnOperation)
                .addGap(18, 18, 18)
                .addComponent(btnDetectPlag)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jSplitTxtOperations.setLeftComponent(jPanOperations);

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTxtPanSourceTxt1.setText("Input text");
        jTxtPanSourceTxt1.setToolTipText("input text");
        jScrollPane1.setViewportView(jTxtPanSourceTxt1);

        jSplitPane1.setRightComponent(jScrollPane1);

        jTxtPanDestTxt1.setText("output text");
        jTxtPanDestTxt1.setToolTipText("output text");
        jScrollPane2.setViewportView(jTxtPanDestTxt1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jScrolTxtAfterEffect.setViewportView(jSplitPane1);

        jSplitTxtOperations.setRightComponent(jScrolTxtAfterEffect);

        jScroPanText.setViewportView(jSplitTxtOperations);

        jSplitOnto.setRightComponent(jScroPanText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitOnto)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitOnto, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOperationActionPerformed
        String[] operArr=executeOper.split("\t");
        for (int i = 0; i <operArr.length; i++) {
            String oneOperation=operArr[i];
            if(oneOperation!=""){
                Goperations.GeneralOper(jTxtPanSourceTxt1, oneOperation,ontologyNames);
                //JOptionPane.showMessageDialog(this,"done");
            }
        }
    }//GEN-LAST:event_btnOperationActionPerformed

    private void chTxtSegmentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chTxtSegmentationActionPerformed
       
        if(chTxtSegmentation.isSelected()){
            executeOper+="\t"+Constants.SEGMENTATION;
        }
        else
        {
            executeOper=executeOper.replace(Constants.SEGMENTATION, "");
        }
    }//GEN-LAST:event_chTxtSegmentationActionPerformed

    private void chRemStopWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chRemStopWActionPerformed
       if(chRemStopW.isSelected()){
            executeOper+="\t"+Constants.S_W_REMOVE;
        }
        else
        {
            executeOper=executeOper.replace(Constants.S_W_REMOVE, "");
        }
    }//GEN-LAST:event_chRemStopWActionPerformed

    private void chStemmingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chStemmingActionPerformed
         if(chStemming.isSelected()){
            executeOper+="\t"+Constants.STEMMING;
        }
        else
        {
            executeOper=executeOper.replace(Constants.STEMMING, "");
        }
    }//GEN-LAST:event_chStemmingActionPerformed

    private void chTermDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chTermDetectionActionPerformed
         if(chTermDetection.isSelected()){
            executeOper+="\t"+Constants.TREM_DETECTION;
        }
        else
        {
            executeOper=executeOper.replace(Constants.TREM_DETECTION, "");
        }
    }//GEN-LAST:event_chTermDetectionActionPerformed

    private void chSemanticMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSemanticMeansActionPerformed
         if(chSemanticMeans.isSelected()){
            executeOper+="\t"+Constants.SEMANTIC_MEANING;
        }
        else
        {
            executeOper=executeOper.replace(Constants.SEMANTIC_MEANING, "");
        }
    }//GEN-LAST:event_chSemanticMeansActionPerformed

    private void chTaggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chTaggerActionPerformed
        if(chTagger.isSelected()){
            executeOper+="\t"+Constants.TAGGING;
        }
        else
        {
            executeOper=executeOper.replace(Constants.TAGGING, "");
        }
    }//GEN-LAST:event_chTaggerActionPerformed

    private void chWordNetOntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chWordNetOntActionPerformed
        if(chWordNetOnt.isSelected()){
            ontologyNames+="\t"+OntologyConstants.WORDNET_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.WORDNET_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chWordNetOntActionPerformed

    private void chGeneontologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chGeneontologyActionPerformed
        if(chGeneontology.isSelected()){
            ontologyNames+="\t"+OntologyConstants.GENO_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.GENO_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chGeneontologyActionPerformed

    private void chDiseaseOntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chDiseaseOntActionPerformed
        if(chDiseaseOnt.isSelected()){
            ontologyNames+="\t"+OntologyConstants.DISEASE_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.DISEASE_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chDiseaseOntActionPerformed

    private void chOgmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chOgmsActionPerformed
        if(chOgms.isSelected()){
            ontologyNames+="\t"+OntologyConstants.OGMS_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.OGMS_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chOgmsActionPerformed

    private void chMeshOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chMeshOntologyActionPerformed
        if(chMeshOntology.isSelected()){
            ontologyNames+="\t"+OntologyConstants.MESH_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.MESH_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chMeshOntologyActionPerformed

    private void chEdamOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chEdamOntologyActionPerformed
        if(chEdamOntology.isSelected()){
            ontologyNames+="\t"+OntologyConstants.EDAM_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.EDAM_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chEdamOntologyActionPerformed

    private void chAnatomyOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chAnatomyOntologyActionPerformed
        if(chAnatomyOntology.isSelected()){
            ontologyNames+="\t"+OntologyConstants.ANATOMY_ONTOLOGY;
        }
        else
        {
            ontologyNames=ontologyNames.replace(OntologyConstants.ANATOMY_ONTOLOGY, "");
        }
    }//GEN-LAST:event_chAnatomyOntologyActionPerformed

    private void btnLoadOntologiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadOntologiesActionPerformed
        // TODO add your handling code here:
        if(chDiseaseOnt.isSelected()){
            DiseasesEncapsulate.loadOnt();
        }
        if(chGeneontology.isSelected()){
            GenoEncapsulate.loadOnt();
        }
        if(chMeshOntology.isSelected()){
            MeshEncapsulate.loadOnt();
        }
        
        if(chWordNetOnt.isSelected()){
            WordNetEncapsulate.loadOnt();
        }
        if(chEdamOntology.isSelected()){
            EdamEncapsulate.loadOnt();
        }
        if(chAnatomyOntology.isSelected()){
            AnatomyEncapsulate.loadOnt();
        }
        if(chOgms.isSelected()){
            OgmsEncapsulate.loadOnt();
        }
       
        //chOgms
    }//GEN-LAST:event_btnLoadOntologiesActionPerformed

    private void chPhraseMeaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPhraseMeaningActionPerformed
        // TODO add your handling code here:
       if(chPhraseMeaning.isSelected()){
            executeOper+="\t"+Constants.PHRASE_DETECTION;
        }
        else
        {
            executeOper=executeOper.replace(Constants.PHRASE_DETECTION, "");
        }
    }//GEN-LAST:event_chPhraseMeaningActionPerformed

    private void chNonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chNonsActionPerformed
        // TODO add your handling code here:
        if(chNons.isSelected()){
            executeOper+="\t"+Constants.NOUNS;
        }
        else
        {
            executeOper=executeOper.replace(Constants.NOUNS, "");
        }
    }//GEN-LAST:event_chNonsActionPerformed

    private void chVerbsOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chVerbsOnlyActionPerformed
        // TODO add your handling code here:
         if(chNons.isSelected()){
            executeOper+="\t"+Constants.VERBS;
        }
        else
        {
            executeOper=executeOper.replace(Constants.VERBS, "");
        }
    }//GEN-LAST:event_chVerbsOnlyActionPerformed

    private void btnDetectPlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectPlagActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDetectPlagActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetectPlag;
    private javax.swing.JButton btnLoadOntologies;
    private javax.swing.JButton btnOperation;
    private javax.swing.JCheckBox chAnatomyOntology;
    private javax.swing.JCheckBox chDiseaseOnt;
    private javax.swing.JCheckBox chEdamOntology;
    private javax.swing.JCheckBox chGeneontology;
    private javax.swing.JCheckBox chMeshOntology;
    private javax.swing.JCheckBox chNons;
    private javax.swing.JCheckBox chOgms;
    private javax.swing.JCheckBox chPhraseMeaning;
    private javax.swing.JCheckBox chRemStopW;
    private javax.swing.JCheckBox chSemanticMeans;
    private javax.swing.JCheckBox chStemming;
    private javax.swing.JCheckBox chTagger;
    private javax.swing.JCheckBox chTermDetection;
    private javax.swing.JCheckBox chTxtSegmentation;
    private javax.swing.JCheckBox chVerbsOnly;
    private javax.swing.JCheckBox chWordNetOnt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScroPanOnto;
    private javax.swing.JScrollPane jScroPanText;
    private javax.swing.JScrollPane jScrolTxtAfterEffect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitOnto;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitTxtOperations;
    private javax.swing.JTextPane jTxtPanDestTxt1;
    private javax.swing.JTextPane jTxtPanSourceTxt1;
    private javax.swing.JPanel panOntologies;
    // End of variables declaration//GEN-END:variables
}
